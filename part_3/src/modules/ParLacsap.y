-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParLacsap where
import AbsLacsap
import LexLacsap
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '.' { PT _ (TS _ 3) }
  ':' { PT _ (TS _ 4) }
  ';' { PT _ (TS _ 5) }
  '=' { PT _ (TS _ 6) }
  'aiuto' { PT _ (TS _ 7) }
  'begin' { PT _ (TS _ 8) }
  'ciao' { PT _ (TS _ 9) }
  'const' { PT _ (TS _ 10) }
  'end' { PT _ (TS _ 11) }
  'function' { PT _ (TS _ 12) }
  'procedure' { PT _ (TS _ 13) }
  'program' { PT _ (TS _ 14) }
  'var' { PT _ (TS _ 15) }
  L_ident  { PT _ (TV $$) }

%%

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Program :: { Program }
Program : 'program' Ident ';' Block '.' { AbsLacsap.Program $2 $4 }
Block :: { Block }
Block : Declarations Statements { AbsLacsap.Block $1 $2 }
Declarations :: { Declarations }
Declarations : 'ciao' { AbsLacsap.Declarations }
ConstDeclarations :: { ConstDeclarations }
ConstDeclarations : 'const' Ident '=' Expression ';' { AbsLacsap.ConstDeclarations $2 $4 }
VarDeclarations :: { VarDeclarations }
VarDeclarations : 'var' Ident ':' Type ';' { AbsLacsap.VarDeclarations $2 $4 }
FunctionDeclarations :: { FunctionDeclarations }
FunctionDeclarations : 'function' Ident '(' Ident ':' Type ')' ':' Type ';' Block ';' { AbsLacsap.FunctionDeclarations $2 $4 $6 $9 $11 }
ProcedureDeclarations :: { ProcedureDeclarations }
ProcedureDeclarations : 'procedure' Ident '(' Ident ':' Type ')' ';' Block ';' { AbsLacsap.ProcedureDeclarations $2 $4 $6 $9 }
Statements :: { Statements }
Statements : 'begin' Statement ';' 'end' { AbsLacsap.Statements $2 }
Statement :: { Statement }
Statement : 'aiuto' { AbsLacsap.Statement }
Expression :: { Expression }
Expression : 'aiuto' { AbsLacsap.Expression }
Type :: { Type }
Type : 'aiuto' { AbsLacsap.Type }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

