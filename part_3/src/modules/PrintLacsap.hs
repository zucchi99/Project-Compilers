{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintLacsap.
--   Generated by the BNF converter.

module PrintLacsap where

import qualified AbsLacsap
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsLacsap.Ident where
  prt _ (AbsLacsap.Ident i) = doc (showString i)

instance Print AbsLacsap.Program where
  prt i e = case e of
    AbsLacsap.Program id block -> prPrec i 0 (concatD [doc (showString "program"), prt 0 id, doc (showString ";"), prt 0 block, doc (showString ".")])

instance Print AbsLacsap.Block where
  prt i e = case e of
    AbsLacsap.Block declarations statements -> prPrec i 0 (concatD [prt 0 declarations, prt 0 statements])

instance Print AbsLacsap.Declarations where
  prt i e = case e of
    AbsLacsap.Declarations -> prPrec i 0 (concatD [doc (showString "ciao")])

instance Print AbsLacsap.ConstDeclarations where
  prt i e = case e of
    AbsLacsap.ConstDeclarations id expression -> prPrec i 0 (concatD [doc (showString "const"), prt 0 id, doc (showString "="), prt 0 expression, doc (showString ";")])

instance Print AbsLacsap.VarDeclarations where
  prt i e = case e of
    AbsLacsap.VarDeclarations id type_ -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id, doc (showString ":"), prt 0 type_, doc (showString ";")])

instance Print AbsLacsap.FunctionDeclarations where
  prt i e = case e of
    AbsLacsap.FunctionDeclarations id1 id2 type_1 type_2 block -> prPrec i 0 (concatD [doc (showString "function"), prt 0 id1, doc (showString "("), prt 0 id2, doc (showString ":"), prt 0 type_1, doc (showString ")"), doc (showString ":"), prt 0 type_2, doc (showString ";"), prt 0 block, doc (showString ";")])

instance Print AbsLacsap.ProcedureDeclarations where
  prt i e = case e of
    AbsLacsap.ProcedureDeclarations id1 id2 type_ block -> prPrec i 0 (concatD [doc (showString "procedure"), prt 0 id1, doc (showString "("), prt 0 id2, doc (showString ":"), prt 0 type_, doc (showString ")"), doc (showString ";"), prt 0 block, doc (showString ";")])

instance Print AbsLacsap.Statements where
  prt i e = case e of
    AbsLacsap.Statements statement -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 statement, doc (showString ";"), doc (showString "end")])

instance Print AbsLacsap.Statement where
  prt i e = case e of
    AbsLacsap.Statement -> prPrec i 0 (concatD [doc (showString "aiuto")])

instance Print AbsLacsap.Expression where
  prt i e = case e of
    AbsLacsap.Expression -> prPrec i 0 (concatD [doc (showString "aiuto")])

instance Print AbsLacsap.Type where
  prt i e = case e of
    AbsLacsap.Type -> prPrec i 0 (concatD [doc (showString "aiuto")])

