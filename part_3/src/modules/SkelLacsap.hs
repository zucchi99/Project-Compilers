module SkelLacsap where

-- Haskell module generated by the BNF converter

import AbsLacsap
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Program ident block -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  Block declarations statements -> failure x
transDeclarations :: Declarations -> Result
transDeclarations x = case x of
  Declarations -> failure x
transConstDeclarations :: ConstDeclarations -> Result
transConstDeclarations x = case x of
  ConstDeclarations ident expression -> failure x
transVarDeclarations :: VarDeclarations -> Result
transVarDeclarations x = case x of
  VarDeclarations ident type_ -> failure x
transFunctionDeclarations :: FunctionDeclarations -> Result
transFunctionDeclarations x = case x of
  FunctionDeclarations ident1 ident2 type_1 type_2 block -> failure x
transProcedureDeclarations :: ProcedureDeclarations -> Result
transProcedureDeclarations x = case x of
  ProcedureDeclarations ident1 ident2 type_ block -> failure x
transStatements :: Statements -> Result
transStatements x = case x of
  Statements statement -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  Statement -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  Expression -> failure x
transType :: Type -> Result
transType x = case x of
  Type -> failure x

