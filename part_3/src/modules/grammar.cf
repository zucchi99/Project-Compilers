
-- comment: one argument for single-line comments
comment "//";
-- comment: two arguments for multi-line comments
comment "{" "}"; 
comment "(*" "*)";

-- entrypoints: set of initial states of the grammar
entrypoints Program;

ProgramStart.                   Program      ::= ProgramKW Ident ";" Declarations InnerBlockWithDecl "." ;

-- Pascal keywords
KeyWordBegin.                   BeginKW      ::= "begin" ;
KeyWordEnd.                     EndKW        ::= "end" ;
KeyWordProgram.                 ProgramKW    ::= "program" ;
KeyWordFunction.                FunctionKW   ::= "function" ;
KeyWordProcedure.               ProcedureKW  ::= "procedure" ;
KeyWordVar.                     VarKW        ::= "var" ;
KeyWordIf.                      IfKW         ::= "if" ;
KeyWordThen.                    ThenKW       ::= "then" ;
KeyWordElse.                    ElseKW       ::= "else" ;
KeyWordTypeInt.                 IntKW        ::= "integer";
KeyWordTypeReal.                RealKW       ::= "real";
KeyWordTypeChar.                CharKW       ::= "char";
KeyWordTypeBoolean.             BoolKW       ::= "boolean";
KeyWordTypeString.              StringKW     ::= "string";
KeyWordTypeArray.               ArrayKW      ::= "array";


-- variables, functions, procedures
rules                           Declarations   ::= VariablesBlock | [FunctionDecl] | [ProcedureDecl] ; --Declarations
-- variables block declaration (can be empty)
rules                           VariablesBlock ::= {- empty -} | VarKW [VariableDecl] ; -- VariablesBlock. 
VariableDeclaration.            VariableDecl   ::= [VariableName] ":" Type ";" ;
VariableDeclarationNames.       VariableName   ::= Ident;
separator nonempty VariableName ",";
-- function and procedure declaration
-- NB no need to add {- empty -} since [Rule] already includes {- empty -} option
FunctionDeclaration.            FunctionDecl   ::= FunctionKW  Ident "(" [VariableDecl] ")" ":" Type ";" InnerBlockWithDecl ;
ProcedureDeclaration.           ProcedureDecl  ::= ProcedureKW Ident "(" [VariableDecl] ")" ";" InnerBlockWithDecl ;
terminator FunctionDecl  ";" ;
terminator ProcedureDecl ";" ;
separator VariableDecl   ";" ;

-- NB In Pascal is not mandatory to place ';' after end keyword --> begin [...] end  |  begin [...] end ; 
-- BUT is mandatory to place '.' after the end keyword of the outer-most end of the main block of any module (program, unit or library) --> begin [...] end .

-- main block: mandatory "."
-- MainBlock.                       MainBlock          ::= OuterBlockWithDecl "." ;
-- blocks with non-mandatory ";"
--rules                            OuterBlockWithDecl ::= InnerBlockWithDecl | InnerBlockWithDecl ";" ; --OuterBlockWithDeclaration.
--rules                            OuterBlockExec     ::= InnerBlockExec     | InnerBlockExec ";" ;     --OuterBlockOnlyExecution.
-- block structure
InnerBlockWithDeclaration.       InnerBlockWithDecl ::= Declarations InnerBlockExec ;
InnerBlockOnlyExecution.         InnerBlockExec     ::= BeginKW [Statement] EndKW ;
separator InnerBlockExec ";" ;

-- TODO
-- Statement
-- RExp

StatementBlock.                 Statement       ::= InnerBlockExec ;
StatementIf.                    Statement       ::= If ;
StatementTemp.                  Statement       ::= "boh" ;
RExpTemp.                       RExp            ::= "help" ;

separator Statement ";" ;

IfDefinition.                   If              ::= IfKW RExp ThenKW Statement Else ;
rules                           Else            ::= {- empty -} | ElseKW Statement ; --ElseDefinition

-- types definition
rules                           Type            ::= BaseType | CompositeType ; --AnyType
rules                           BaseType        ::= IntKW | RealKW | CharKW | BoolKW | StringKW ; --BaseType
-- actually for arrays should be: array [0..5, 1..6] of anytype
-- semplication: array [5] of basetype (NB note that is case insensitive)
CompTypeArray.                  CompositeType   ::= ArrayKW "[" Integer "]" "of" BaseType ;
CompTypePointer.                CompositeType   ::= "^" Type ;



