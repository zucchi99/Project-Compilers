
-- comment: one argument for single-line comments
comment "//";
-- comment: two arguments for multi-line comments
comment "{" "}"; 
comment "(*" "*)";

-- entrypoints: set of initial states of the grammar
entrypoints Program;

ProgramStart.                   Program      ::= ProgramKW Ident ";" Declarations MainBlock ;

-- Pascal keywords
KeyWordBegin.                   BeginKW      ::= "begin" ;
KeyWordEnd.                     EndKW        ::= "end" ;
KeyWordProgram.                 ProgramKW    ::= "program" ;
KeyWordFunction.                FunctionKW   ::= "function" ;
KeyWordProcedure.               ProcedureKW  ::= "procedure" ;
KeyWordVar.                     VarKW        ::= "var" ;
KeyWordIf.                      IfKW         ::= "if" ;
KeyWordThen.                    ThenKW       ::= "then" ;
KeyWordElse.                    ElseKW       ::= "else" ;
KeyWordTypeInt.                 IntKW        ::= "integer";
KeyWordTypeReal.                RealKW       ::= "real";
KeyWordTypeChar.                CharKW       ::= "char";
KeyWordTypeBoolean.             BoolKW       ::= "boolean";
KeyWordTypeString.              StringKW     ::= "string";
KeyWordTypeArray.               ArrayKW      ::= "array";


-- variables, functions, procedures
Declarations.                   Declarations   ::= VariablesBlock [FunctionDecl] [ProcedureDecl] ;
-- variables block declaration (can be empty)
VariablesBlock.                 VariablesBlock ::= {- empty -} | VarKW [VariableDecl] ;
VariableDeclaration.            VariableDecl   ::= [VariableName] ":" Type ";" ;
VariableDeclarationNames.       VariableName   ::= Ident;
separator nonempty VariableNames ",";
-- function and procedure declaration
-- NB no need to add {- empty -} since [Rule] already includes {- empty -} option
FunctionDeclaration.            FunctionDecl   ::= FunctionKW  Ident "(" [Parameter] ")" ":" Type ";" OuterBlockWithDecl ;
ProcedureDeclaration.           ProcedureDecl  ::= ProcedureKW Ident "(" [Parameter] ")" ";" OuterBlockWithDecl ;

ParameterDeclaration.           Parameter      ::= Ident ":" Type;
separator Parameter ",";


-- NB In Pascal is not mandatory to place ';' after end keyword --> begin [...] end  |  begin [...] end ; 
-- BUT is mandatory to place '.' after the end keyword of the outer-most end of the main block of any module (program, unit or library) --> begin [...] end .

-- main block: mandatory "."
MainBlock.                       MainBlock          ::= OuterBlockWithDecl "." ;
-- blocks with non-mandatory ";"
OuterBlockWithDeclaration.       OuterBlockWithDecl ::= InnerBlockWithDecl | InnerBlockWithDecl ";" ;
OuterBlockOnlyExecution.         OuterBlockExec     ::= InnerBlockExec     | InnerBlockExec ";" ; 
-- block structure
InnerBlockWithDeclaration.       InnerBlockWithDecl ::= Declarations InnerBlockExec ;
InnerBlockOnlyExecution.         InnerBlockExec     ::= BeginKW [Statement] EndKW ;


-- TODO
-- Statement
-- RExp

StatementBlock.                 Statement       ::= OuterBlockExec ;
StatementIf.                    Statement       ::= If ;

terminator Statement ";" ;

IfDefinition.                   If              ::= IfKW RExp ThenKW Statement Else ;
ElseDefinition.                 Else            ::= {- empty -} | ElseKW Statement ;

-- types definition
AnyType.                        Type            ::= BaseType | CompositeType ;
BaseType.                       BaseType        ::= IntKW | RealKW | CharKW | BoolKW | StringKW ;
-- actually for arrays should be: array [0..5, 1..6] of anytype
-- semplication: array [5] of basetype (NB note that is case insensitive)
CompTypeArray.                  CompositeType   ::= ArrayKW "[" Integer "]" "of" BaseType ;
CompTypePointer.                CompositeType   ::= "^" Type ;

