-- This Happy file was machine-generated by the BNF converter and modified by hand

{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}

module Parser where

import ErrM
import LexGrammar
import AbstractSyntax
import qualified Types as T
import qualified Env as E

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
    '(' { PT _ (TS _ 1) }
    ')' { PT _ (TS _ 2) }
    '*' { PT _ (TS _ 3) }
    '**' { PT _ (TS _ 4) }
    '+' { PT _ (TS _ 5) }
    ',' { PT _ (TS _ 6) }
    '-' { PT _ (TS _ 7) }
    '.' { PT _ (TS _ 8) }
    '..' { PT _ (TS _ 9) }
    '/' { PT _ (TS _ 10) }
    ':' { PT _ (TS _ 11) }
    ':=' { PT _ (TS _ 12) }
    ';' { PT _ (TS _ 13) }
    '<' { PT _ (TS _ 14) }
    '<=' { PT _ (TS _ 15) }
    '<>' { PT _ (TS _ 16) }
    '=' { PT _ (TS _ 17) }
    '>' { PT _ (TS _ 18) }
    '>=' { PT _ (TS _ 19) }
    '@' { PT _ (TS _ 20) }
    '[' { PT _ (TS _ 21) }
    ']' { PT _ (TS _ 22) }
    '^' { PT _ (TS _ 23) }
    'and' { PT _ (TS _ 24) }
    'array' { PT _ (TS _ 25) }
    'begin' { PT _ (TS _ 26) }
    'boolean' { PT _ (TS _ 27) }
    'break' { PT _ (TS _ 28) }
    'char' { PT _ (TS _ 29) }
    'const' { PT _ (TS _ 30) }
    'continue' { PT _ (TS _ 31) }
    'div' { PT _ (TS _ 32) }
    'do' { PT _ (TS _ 33) }
    'downto' { PT _ (TS _ 34) }
    'else' { PT _ (TS _ 35) }
    'end' { PT _ (TS _ 36) }
    'false' { PT _ (TS _ 37) }
    'for' { PT _ (TS _ 38) }
    'forward' { PT _ (TS _ 39) }
    'function' { PT _ (TS _ 40) }
    'if' { PT _ (TS _ 41) }
    'integer' { PT _ (TS _ 42) }
    'mod' { PT _ (TS _ 43) }
    'not' { PT _ (TS _ 44) }
    'of' { PT _ (TS _ 45) }
    'or' { PT _ (TS _ 46) }
    'procedure' { PT _ (TS _ 47) }
    'program' { PT _ (TS _ 48) }
    'readChar' { PT _ (TS _ 49) }
    'readInt' { PT _ (TS _ 50) }
    'readReal' { PT _ (TS _ 51) }
    'readString' { PT _ (TS _ 52) }
    'real' { PT _ (TS _ 53) }
    'repeat' { PT _ (TS _ 54) }
    'result' { PT _ (TS _ 55) }
    'string' { PT _ (TS _ 56) }
    'then' { PT _ (TS _ 57) }
    'to' { PT _ (TS _ 58) }
    'true' { PT _ (TS _ 59) }
    'until' { PT _ (TS _ 60) }
    'var' { PT _ (TS _ 61) }
    'while' { PT _ (TS _ 62) }
    'writeChar' { PT _ (TS _ 63) }
    'writeInt' { PT _ (TS _ 64) }
    'writeReal' { PT _ (TS _ 65) }
    'writeString' { PT _ (TS _ 66) }
    L_ident  { PT _ (TV _) }
    L_integ  { PT _ (TI _) }
    L_doubl  { PT _ (TD _) }
    L_charac { PT _ (TC _) }
    L_quoted { PT _ (TL _) }

%%

--------------------------------------------------------------------------------------------------------------------------------------

Ident   :: { Ident }
Ident   : L_ident {
    Ident {
        id_name = (prToken $1),
        ident_pos = (tokenLineCol $1),
        ident_env = E.emptyEnv, 
        ident_errors = []
    }                 
}

Integer :: { (Int, (Int, Int)) }
Integer : L_integ   { ((read (prToken $1)) :: Int, tokenLineCol $1) }

Double  :: { (Double, (Int, Int)) }
Double  : L_doubl   { ((read (prToken $1)) :: Double, tokenLineCol $1) }

Char    :: { (Char, (Int, Int)) }
Char    : L_charac  { ((read (prToken $1)) :: Char, tokenLineCol $1) }

String  :: { (String, (Int, Int)) }
String  : L_quoted  { ((read (prToken $1)) :: String, tokenLineCol $1) }

Boolean :: { (Bool, (Int, Int)) }
Boolean : 'true'        { (True, tokenLineCol $1) }
        | 'false'       { (False, tokenLineCol $1) }

Program :: { Program }
Program : 'program' Ident ';' Block '.' {
    ProgramStart  {
        program_name = $2,
        program_block = $4,
        program_pos = (tokenLineCol $1),
        program_env = E.emptyEnv, 
        program_errors = []
}}

Block   :: { Block }
Block   : ListDeclaration 'begin' NonMandatoryTerminator ListStatement 'end' {
    Block  {
        block_declarations = $1,
        statements = $4,
        block_pos = if (null $1) then (tokenLineCol $2) else (declaration_pos (head $1)),
        block_env = E.emptyEnv,
        block_errors = []
}}

ListDeclaration :: { [Declaration] }
ListDeclaration : {- empty -}                 { [] }
                | ListDeclaration Declaration { $1 ++ $2 }

NonMandatoryTerminator  :: {}
NonMandatoryTerminator  : {- empty -} {}
                        | ';'         {}

Declaration :: { [Declaration] }
Declaration : CostantsBlock     { $1 } 
            | VariablesBlock    { $1 } 
            | FunctionForw      { [$1] } 
            | ProcedureForw     { [$1] } 
            | FunctionDecl      { [$1] } 
            | ProcedureDecl     { [$1] } 

CostantsBlock   :: { [Declaration] }
CostantsBlock   : 'const' ListConstantDecl  { $2 }

ListConstantDecl    :: { [Declaration] }
ListConstantDecl    : ConstantDecl ';'                  { (:[]) $1 }
                    | ConstantDecl ';' ListConstantDecl { (:) $1 $3 }

ConstantDecl    :: { Declaration }
ConstantDecl    : Ident '=' RightExp {
    DeclarationCostant   {
        constant_name = $1,
        constant_type_maybe = Nothing,
        constant_value = $3,
        declaration_pos = (ident_pos $1),
        declaration_env = E.emptyEnv,
        declaration_errors = []
}}

VariablesBlock  :: { [Declaration] }
VariablesBlock  : 'var' ListVariableDeclBlock { $2 }

ListVariableDeclBlock   :: { [Declaration] }
ListVariableDeclBlock   : VariableDeclBlock ';'                         { $1 }
                        | VariableDeclBlock ';' ListVariableDeclBlock   { $1 ++ $3 }

ListVariableDeclFunc    :: { [Declaration] }
ListVariableDeclFunc    : {- empty -}                                   { [] }
                        | VariableDeclFunc                              { $1 }
                        | VariableDeclFunc ';' ListVariableDeclFunc     { $1 ++ $3 }

VariableDeclBlock :: { [Declaration] }
VariableDeclBlock : ListIdent ':' Type InitAssign   {
    -- foreach element in ListIdent, create a DeclarationVariable
    let createDeclarationVariable :: Ident -> Declaration
        createDeclarationVariable ident = DeclarationVariable   {
            variable_name = ident,
            variable_type = $3,
            variable_value_maybe = $4,
            param_type_maybe = Nothing,
            declaration_pos = (ident_pos ident),
            declaration_env = E.emptyEnv,
            declaration_errors = []
    } 
    in map (createDeclarationVariable) $1
}

InitAssign  :: { Maybe (RightExp) }
InitAssign  : {- empty -}       { Nothing }
            | '=' RightExp      { Just $2 }

ListStatement   :: { [Statement] }
ListStatement   : {- empty -}                 { [] }
                | Statement                   { (:[]) $1 }
                | Statement ';' ListStatement { (:) $1 $3 }
                
DeclarationFunc :: { [Declaration] }
DeclarationFunc : {- empty -}                   { [] }
                | '(' ListVariableDeclFunc ')'  { $2 }

VariableDeclFunc    :: { [Declaration] }
VariableDeclFunc    : ParameterType ListIdent ':' Type    {
    -- foreach element in ListIdent, create a DeclarationVariable
    let createDeclarationVariable :: Ident -> Declaration
        createDeclarationVariable ident = DeclarationVariable   {
            variable_name = ident,
            variable_type = $4,
            variable_value_maybe = Nothing,
            param_type_maybe = Just $1,
            declaration_pos = (ident_pos ident),
            declaration_env = E.emptyEnv,
            declaration_errors = []
    } 
    in map (createDeclarationVariable) $2
}

ParameterType :: { E.ParameterType }
ParameterType : {- empty -} { E.Value }
              | 'var' { E.Reference }
              | 'result' { E.ValueResult }

ListIdent   :: { [Ident] }
ListIdent   : Ident                 { (:[]) $1 } 
            | Ident ',' ListIdent   { (:) $1 $3 }

FunctionSign    :: { Declaration }
FunctionSign    : 'function' Ident DeclarationFunc ':' Type ';' {
    DeclarationFunction   {
        declaration_name = $2,
        declaration_params = $3,
        function_type = $5,
        declaration_body_maybe = Nothing,
        declaration_pos = (tokenLineCol $1),
        declaration_env = E.emptyEnv,
        declaration_errors = []
}}

ProcedureSign   :: { Declaration }
ProcedureSign   : 'procedure' Ident DeclarationFunc ';' {
    DeclarationProcedure  {
        declaration_name = $2,
        declaration_params = $3,
        declaration_body_maybe = Nothing,
        declaration_pos = (tokenLineCol $1),
        declaration_env = E.emptyEnv,
        declaration_errors = []
}}

FunctionDecl    :: { Declaration }
FunctionDecl    : FunctionSign Block ';'    {
    DeclarationFunction   {
        declaration_name = declaration_name $1,
        declaration_params = declaration_params $1,
        function_type = function_type $1,
        declaration_body_maybe = Just $2,
        declaration_pos = (declaration_pos $1),
        declaration_env = E.emptyEnv,
        declaration_errors = []
}}

ProcedureDecl   :: { Declaration }
ProcedureDecl   : ProcedureSign Block ';'   {
    DeclarationProcedure  {
        declaration_name = declaration_name $1,
        declaration_params = declaration_params $1,
        declaration_body_maybe = Just $2,
        declaration_pos = (declaration_pos $1),
        declaration_env = E.emptyEnv,
        declaration_errors = []
}}

FunctionForw    :: { Declaration }
FunctionForw    : FunctionSign 'forward' ';'    { $1 }

ProcedureForw   :: { Declaration }
ProcedureForw   : ProcedureSign 'forward' ';'   { $1 }

FuncProcCall    :: { Statement }
FuncProcCall    : Ident '(' ListRightExp ')'    {
    StatementFuncProcCall {
        call_name = $1,
        call_params = $3,
        statement_pos = (ident_pos $1),
        statement_env = E.emptyEnv,
        statement_errors = []
}}

ListRightExp    :: { [RightExp] }
ListRightExp    : {- empty -}                   { [] }
                | RightExp                      { (:[]) $1 }
                | RightExp ',' ListRightExp     { (:) $1 $3 }

Statement :: { Statement }
Statement   : Block  {
                StatementBlock {
                    block = $1,
                    statement_pos = (block_pos $1),
                    statement_env = E.emptyEnv,
                    statement_errors = []
                }}
            | 'if' RightExp 'then' Statement ElseBlock {
                StatementIf   {
                    condition = $2,
                    then_body = $4,
                    else_body_maybe = $5,
                    statement_pos = (tokenLineCol $1),
                    statement_env = E.emptyEnv,
                    statement_errors = []
                }}
            | 'for' Assign ForCondition RightExp 'do' Statement {
                StatementFor  {
                    condition = ($3 (left_exp_assignment $2) $4),
                    then_body = $6,
                    for_var = $2,
                    statement_pos = (tokenLineCol $1),
                    statement_env = E.emptyEnv,
                    statement_errors = []
                }}
            | 'while' RightExp 'do' Statement {
                StatementWhile    {
                    condition = $2,
                    then_body = $4,
                    statement_pos = (tokenLineCol $1),
                    statement_env = E.emptyEnv,
                    statement_errors = []
                }}
            | 'repeat' Statement 'until' RightExp {
                StatementRepeatUntil  {
                    condition = $4,
                    then_body = $2,
                    statement_pos = (tokenLineCol $1),
                    statement_env = E.emptyEnv,
                    statement_errors = []
                }}
            | Assign {
                StatementAssign   {
                    assign = $1,
                    statement_pos = (assign_pos $1),
                    statement_env = E.emptyEnv,
                    statement_errors = []
                }}
            | FuncProcCall { $1 }
            | WritePrimitive {
                StatementWrite {
                    write_primitive = $1,
                    statement_pos = (write_primitive_pos $1),
                    statement_env = E.emptyEnv,
                    statement_errors = []
                }}
            | ReadPrimitive {
                StatementRead {
                    read_primitive = $1,
                    statement_pos = (read_primitive_pos $1),
                    statement_env = E.emptyEnv,
                    statement_errors = []
                }}
          | 'break' { 
                StatementBreak {
                    statement_pos = (tokenLineCol $1),
                    statement_env = E.emptyEnv, 
                    statement_errors = []
                }}
          | 'continue' { 
                StatementContinue {
                    statement_pos = (tokenLineCol $1),
                    statement_env = E.emptyEnv, 
                    statement_errors = []
                }}

ForCondition    :: { LeftExp -> RightExp -> RightExp }
ForCondition    : 'to' {
                    \new_sx new_dx -> RightExpLessEqual {
                        sx = RightExpLeftExp {
                            left_exp_right_exp = new_sx, right_exp_pos = (left_exp_pos new_sx),
                            right_exp_type = T.TBDType,
                            right_exp_env = E.emptyEnv,
                            right_exp_errors = [] 
                        }, dx = new_dx, right_exp_pos = (right_exp_pos new_dx),
                        right_exp_type = T.TBDType,
                        right_exp_env = E.emptyEnv,
                        right_exp_errors = []
                    }}
                | 'downto' {
                    \new_sx new_dx -> RightExpGreaterEqual {
                        sx = RightExpLeftExp {
                            left_exp_right_exp = new_sx, right_exp_pos = (left_exp_pos new_sx),
                            right_exp_type = T.TBDType,
                            right_exp_env = E.emptyEnv,
                            right_exp_errors = [] 
                        }, dx = new_dx, right_exp_pos = (right_exp_pos new_dx),
                        right_exp_type = T.TBDType,
                        right_exp_env = E.emptyEnv,
                        right_exp_errors = []
                    }}

ElseBlock   :: { Maybe ElseBlock }
ElseBlock   : {- empty -} { Nothing }
            | 'else' Statement {
                Just ElseBlock    {
                    else_body = $2,
                    else_block_pos = (tokenLineCol $1),
                    else_block_env = E.emptyEnv,
                    else_block_errors = []
                }}

Assign      :: { Assign }
Assign      : LeftExp ':=' RightExp {
    VariableAssignment    {
        left_exp_assignment = $1,
        right_exp_assignment = $3,
        assign_pos = (left_exp_pos $1),
        assign_env = E.emptyEnv,
        assign_errors = []
}}

RightExp    :: { RightExp }
RightExp    : RightExp1   { $1 }
            | RightExp 'or' RightExp1 {
                RightExpOr    {
                    sx = $1,
                    dx = $3,
                    right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = []
}}

RightExp1   :: { RightExp }
RightExp1   : RightExp2  { $1 }
            | RightExp1 'and' RightExp2 {
                RightExpAnd {
                    sx = $1,
                    dx = $3, 
                    right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = []
}}

RightExp2   :: { RightExp }
RightExp2   : RightExp3   { $1 }
            | RightExp2 '>' RightExp3 {
                RightExpGreater {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = []
                }}
            | RightExp2 '<' RightExp3 {
                RightExpLess {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = []
                }}
            | RightExp2 '>=' RightExp3 {
                RightExpGreaterEqual {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = []
                }}
            | RightExp2 '<=' RightExp3 {
                RightExpLessEqual {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | RightExp2 '=' RightExp3 {
                RightExpEqual {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | RightExp2 '<>' RightExp3 {
                RightExpNotEqual {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}

RightExp3   :: { RightExp }
RightExp3   : RightExp4 { $1 }
            | RightExp3 '+' RightExp4 {
                RightExpPlus {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | RightExp3 '-' RightExp4 {
                RightExpMinus {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}

RightExp4   :: { RightExp }
RightExp4   : RightExp5 { $1 }
            | RightExp4 '*' RightExp5 {
                RightExpTimes {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | RightExp4 '/' RightExp5 {
                RightExpDivide {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | RightExp4 'mod' RightExp5 {
                RightExpMod {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | RightExp4 'div' RightExp5 {
                RightExpDiv {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}

RightExp5   :: { RightExp }
RightExp5   : RightExp6 { $1 }
            | RightExp5 '**' RightExp6 {
                RightExpPower {
                    sx = $1, dx = $3, right_exp_pos = (right_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}

RightExp6   :: { RightExp }
RightExp6   : RightExp7  { $1 }
            | 'not' RightExp7  {
                RightExpNot {
                    dx = $2, right_exp_pos = (tokenLineCol $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | '-' RightExp7 {
                RightExpMinusUnary {
                    dx = $2, right_exp_pos = (tokenLineCol $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | '+' RightExp7 {
                RightExpPlusUnary {
                    dx = $2, right_exp_pos = (tokenLineCol $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}

RightExp7   :: { RightExp }
RightExp7   : '(' RightExp ')' { $2 }
            | Integer {
                RightExpInteger   {
                    right_exp_int = fst $1, right_exp_pos = snd $1,
                    right_exp_type = T.IntegerType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | Double {
                RightExpReal {
                    right_exp_double = fst $1, right_exp_pos = snd $1,
                    right_exp_type = T.RealType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | Char {
                RightExpChar      {
                    right_exp_char = fst $1, right_exp_pos = snd $1,
                    right_exp_type = T.CharType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | Boolean {
                RightExpBoolean   {
                    right_exp_bool = fst $1, right_exp_pos = snd $1,
                    right_exp_type = T.BooleanType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}
            | String {
                RightExpString    {
                    right_exp_string = fst $1,
                    right_exp_pos = snd $1,
                    right_exp_type = T.StringType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = []                                                 
                }}
            | FuncProcCall {
                RightExpFuncProcCall  {
                    call_name_right_exp = call_name $1,
                    call_params_right_exp = call_params $1,
                    right_exp_pos = (statement_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = []  
                }}
            | LeftExp {
                RightExpLeftExp {
                    left_exp_right_exp = $1, right_exp_pos = (left_exp_pos $1),
                    right_exp_type = T.TBDType,
                    right_exp_env = E.emptyEnv,
                    right_exp_errors = [] 
                }}

LeftExp :: { LeftExp }
LeftExp : Ident {
            LeftExpIdent {
                left_exp_name = $1, left_exp_pos = (ident_pos $1),
                left_exp_type = T.TBDType,
                left_exp_env = E.emptyEnv,
                left_exp_errors = [] 
            }}
        | LeftExp '[' ListRightExp ']' {
            LeftExpArrayAccess {
                array_name = $1, array_pos = $3, left_exp_pos = (left_exp_pos $1),
                left_exp_type = T.TBDType,
                left_exp_env = E.emptyEnv,
                left_exp_errors = [] 
            }}
        | LeftExp '^' {
            LeftExpPointerValue {
                pointer_value = $1, left_exp_pos = (left_exp_pos $1),
                left_exp_type = T.TBDType,
                left_exp_env = E.emptyEnv,
                left_exp_errors = [] 
            }}
        | LeftExp '@' {
            LeftExpPointerAddress {
                pointer_address = $1, left_exp_pos = (left_exp_pos $1),
                left_exp_type = T.TBDType,
                left_exp_env = E.emptyEnv,
                left_exp_errors = []  
            }}

Type    :: { T.Type }
Type    : BaseType { $1 }
        | CompositeType { $1 }

BaseType    :: { T.Type }
BaseType    : 'integer' { T.IntegerType }
            | 'real'    { T.RealType }
            | 'char'    { T.CharType }
            | 'boolean' { T.BooleanType }
            | 'string'  { T.StringType }

CompositeType   :: { T.Type }
CompositeType   : 'array' '[' ListArrayDeclarationDim ']' 'of' Type {
                    T.ArrayType { T.aType = $6, T.dimensions = $3 }}
                | '^' Type {
                    T.PointerType { T.pType = $2 }}

ListArrayDeclarationDim :: { [(Int, Int)] }
ListArrayDeclarationDim : {- empty -}                                     { [] }
                        | ArrayDeclarationDim                             { (:[]) $1 }
                        | ArrayDeclarationDim ',' ListArrayDeclarationDim { (:) $1 $3 }

ArrayDeclarationDim :: { (Int, Int) }
ArrayDeclarationDim : Integer '..' Integer { if fst $1 <= fst $3 then (fst $1, fst $3) else (fst $3, fst $1) }

WritePrimitive :: { WritePrimitive }
WritePrimitive  : 'writeInt' '(' RightExp ')' {
                    WriteInt  {
                        write_exp = $3, write_primitive_pos = (tokenLineCol $1),
                        write_primitive_env = E.emptyEnv,
                        write_primitive_errors = []
                    }}
                | 'writeReal' '(' RightExp ')' {
                    WriteReal {
                        write_exp = $3, write_primitive_pos = (tokenLineCol $1),
                        write_primitive_env = E.emptyEnv,
                        write_primitive_errors = [] 
                    }}
                | 'writeChar' '(' RightExp ')' {
                    WriteChar {
                        write_exp = $3, write_primitive_pos = (tokenLineCol $1),
                        write_primitive_env = E.emptyEnv,
                        write_primitive_errors = []
                    }}
                | 'writeString' '(' RightExp ')' {
                    WriteString {
                        write_exp = $3, write_primitive_pos = (tokenLineCol $1),
                        write_primitive_env = E.emptyEnv,
                        write_primitive_errors = []
                    }}
                
ReadPrimitive :: { ReadPrimitive }
ReadPrimitive   : 'readInt' '(' LeftExp ')'     {
                    ReadInt {
                        read_exp = $3, read_primitive_pos = (tokenLineCol $1),
                        read_primitive_env = E.emptyEnv,
                        read_primitive_errors = []
                    }}
                | 'readReal' '(' LeftExp ')'    {
                    ReadReal {
                        read_exp = $3, read_primitive_pos = (tokenLineCol $1),
                        read_primitive_env = E.emptyEnv,
                        read_primitive_errors = []
                    }}
                | 'readChar' '(' LeftExp ')'    {
                    ReadChar      {
                        read_exp = $3, read_primitive_pos = (tokenLineCol $1),
                        read_primitive_env = E.emptyEnv,
                        read_primitive_errors = []
                    }}
                | 'readString' '(' LeftExp ')'  {
                    ReadString    {
                        read_exp = $3, read_primitive_pos = (tokenLineCol $1),
                        read_primitive_env = E.emptyEnv,
                        read_primitive_errors = []
                    }}

--------------------------------------------------------------------------------------------------------------------------------------

{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
    Bad $ "syntax error at " ++ tokenPos ts ++
    case ts of
        []      -> []
        [Err _] -> " due to lexer error"
        t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}