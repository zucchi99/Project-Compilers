-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsGrammar where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data BeginKW = KeyWordBegin
  deriving (Eq, Ord, Show, Read)

data EndKW = KeyWordEnd
  deriving (Eq, Ord, Show, Read)

data ProgramKW = KeyWordProgram
  deriving (Eq, Ord, Show, Read)

data FunctionKW = KeyWordFunction
  deriving (Eq, Ord, Show, Read)

data ProcedureKW = KeyWordProcedure
  deriving (Eq, Ord, Show, Read)

data VarKW = KeyWordVar
  deriving (Eq, Ord, Show, Read)

data ConstKW = KeyWordConst
  deriving (Eq, Ord, Show, Read)

data IfKW = KeyWordIf
  deriving (Eq, Ord, Show, Read)

data ThenKW = KeyWordThen
  deriving (Eq, Ord, Show, Read)

data ElseKW = KeyWordElse
  deriving (Eq, Ord, Show, Read)

data WhileKW = KeyWordWhile
  deriving (Eq, Ord, Show, Read)

data ForKW = KeyWordFor
  deriving (Eq, Ord, Show, Read)

data ToKW = KeyWordTo
  deriving (Eq, Ord, Show, Read)

data DoKW = KeyWordDo
  deriving (Eq, Ord, Show, Read)

data RepeatKW = KeyWordRepeat
  deriving (Eq, Ord, Show, Read)

data UntilKW = KeyWordUntil
  deriving (Eq, Ord, Show, Read)

data IntKW = KeyWordTypeInt
  deriving (Eq, Ord, Show, Read)

data RealKW = KeyWordTypeReal
  deriving (Eq, Ord, Show, Read)

data CharKW = KeyWordTypeChar
  deriving (Eq, Ord, Show, Read)

data BoolKW = KeyWordTypeBoolean
  deriving (Eq, Ord, Show, Read)

data StringKW = KeyWordTypeString
  deriving (Eq, Ord, Show, Read)

data ArrayKW = KeyWordTypeArray
  deriving (Eq, Ord, Show, Read)

data Program = ProgramStart ProgramKW Ident InnerBlockWithDecl
  deriving (Eq, Ord, Show, Read)

data InnerBlockWithDecl
    = InnerBlockWithDeclaration [Declaration] InnerBlockExec
  deriving (Eq, Ord, Show, Read)

data InnerBlockExec
    = InnerBlockOnlyExecution BeginKW NonMandatoryTerminator [Statement] EndKW
  deriving (Eq, Ord, Show, Read)

data NonMandatoryTerminator
    = NonMandatoryTerminator1 | NonMandatoryTerminator2
  deriving (Eq, Ord, Show, Read)

data Declaration
    = DeclarationCostantsBlock CostantsBlock
    | DeclarationVariablesBlock VariablesBlock
    | DeclarationFunctionDecl FunctionDecl
    | DeclarationProcedureDecl ProcedureDecl
  deriving (Eq, Ord, Show, Read)

data CostantsBlock = CostantsBlock1 ConstKW [ConstantDecl]
  deriving (Eq, Ord, Show, Read)

data ConstantDecl = ConstantDeclaration Ident RightExp
  deriving (Eq, Ord, Show, Read)

data VariablesBlock = VariablesBlock1 VarKW [VariableDeclBlock]
  deriving (Eq, Ord, Show, Read)

data VariableDeclBlock
    = VariableDeclarationInsideBlock [Ident] Type InitAssign
  deriving (Eq, Ord, Show, Read)

data InitAssign = InitAssign1 | InitAssign2 RightExp
  deriving (Eq, Ord, Show, Read)

data DeclarationFunc
    = DeclarationFunc1 | DeclarationFunc2 [VariableDeclFunc]
  deriving (Eq, Ord, Show, Read)

data VariableDeclFunc = VariableDeclarationInsideF [Ident] Type
  deriving (Eq, Ord, Show, Read)

data FunctionDecl
    = FunctionDeclaration FunctionKW Ident DeclarationFunc Type InnerBlockWithDecl
  deriving (Eq, Ord, Show, Read)

data ProcedureDecl
    = ProcedureDeclaration ProcedureKW Ident DeclarationFunc InnerBlockWithDecl
  deriving (Eq, Ord, Show, Read)

data FunctionCall = FunctionCall Ident [RightExp]
  deriving (Eq, Ord, Show, Read)

data ProcedureCall = ProcedureCall Ident [RightExp]
  deriving (Eq, Ord, Show, Read)

data Statement
    = StatementBlock InnerBlockExec
    | StatementIf IfKW RightExp ThenKW Statement ElseBlock
    | StatementFor ForKW Assign ToKW RightExp DoKW Statement
    | StatementWhile WhileKW RightExp DoKW Statement
    | StatementRepeatUntil RepeatKW [Statement] UntilKW RightExp
    | StatementAssign Assign
    | StatementFunctionCall FunctionCall
    | StatementProcedureCall ProcedureCall
    | StatementWrite WritePrimitive
    | StatementRead ReadPrimitive
  deriving (Eq, Ord, Show, Read)

data ElseBlock = ElseBlock1 | ElseBlock2 ElseKW Statement
  deriving (Eq, Ord, Show, Read)

data Assign = VariableAssignment LeftExp RightExp
  deriving (Eq, Ord, Show, Read)

data RightExp
    = RightExpOr RightExp RightExp
    | RightExpAnd RightExp RightExp
    | RightExpGreater RightExp RightExp
    | RightExpLess RightExp RightExp
    | RightExpGreaterEqual RightExp RightExp
    | RightExpLessEqual RightExp RightExp
    | RightExpEqual RightExp RightExp
    | RightExpPlus RightExp RightExp
    | RightExpMinus RightExp RightExp
    | RightExpTimes RightExp RightExp
    | RightExpDivide RightExp RightExp
    | RightExpMod RightExp RightExp
    | RightExpDiv RightExp RightExp
    | RightExpPower RightExp RightExp
    | RightExpNot RightExp
    | RightExpMinusUnary RightExp
    | RightExpPlusUnary RightExp
    | RightExpInteger Integer
    | RightExpReal Double
    | RightExpBoolean Boolean
    | RightExpChar Char
    | RightExpString String
    | RightExpFunctionCall FunctionCall
    | RightExpCopy LeftExp
  deriving (Eq, Ord, Show, Read)

data LeftExp
    = LeftExpIdent Ident
    | LeftExpArrayAccess LeftExp [RightExp]
    | LeftExpPointerValue LeftExp
    | LeftExpPointerAddress LeftExp
  deriving (Eq, Ord, Show, Read)

data Type = TypeBaseType BaseType | TypeCompositeType CompositeType
  deriving (Eq, Ord, Show, Read)

data BaseType
    = BaseTypeIntKW IntKW
    | BaseTypeRealKW RealKW
    | BaseTypeCharKW CharKW
    | BaseTypeBoolKW BoolKW
    | BaseTypeStringKW StringKW
  deriving (Eq, Ord, Show, Read)

data Boolean = Boolean_true | Boolean_false
  deriving (Eq, Ord, Show, Read)

data CompositeType
    = CompTypeArray ArrayKW [ArrayDeclarationDim] BaseType
    | CompTypePointer Type
  deriving (Eq, Ord, Show, Read)

data ArrayDeclarationDim = ArrayDeclarationDim RightExp RightExp
  deriving (Eq, Ord, Show, Read)

data WritePrimitive
    = WriteInt RightExp
    | WriteReal RightExp
    | WriteChar RightExp
    | WriteString RightExp
  deriving (Eq, Ord, Show, Read)

data ReadPrimitive
    = ReadInt LeftExp
    | ReadReal LeftExp
    | ReadChar LeftExp
    | ReadString LeftExp
  deriving (Eq, Ord, Show, Read)

