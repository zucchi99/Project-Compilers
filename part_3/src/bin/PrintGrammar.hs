{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintGrammar.
--   Generated by the BNF converter.

module PrintGrammar where

import qualified AbsGrammar
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsGrammar.Ident where
  prt _ (AbsGrammar.Ident i) = doc (showString i)

instance Print AbsGrammar.BeginKW where
  prt i e = case e of
    AbsGrammar.KeyWordBegin -> prPrec i 0 (concatD [doc (showString "begin")])

instance Print AbsGrammar.EndKW where
  prt i e = case e of
    AbsGrammar.KeyWordEnd -> prPrec i 0 (concatD [doc (showString "end")])

instance Print AbsGrammar.ProgramKW where
  prt i e = case e of
    AbsGrammar.KeyWordProgram -> prPrec i 0 (concatD [doc (showString "program")])

instance Print AbsGrammar.FunctionKW where
  prt i e = case e of
    AbsGrammar.KeyWordFunction -> prPrec i 0 (concatD [doc (showString "function")])

instance Print AbsGrammar.ProcedureKW where
  prt i e = case e of
    AbsGrammar.KeyWordProcedure -> prPrec i 0 (concatD [doc (showString "procedure")])

instance Print AbsGrammar.VarKW where
  prt i e = case e of
    AbsGrammar.KeyWordVar -> prPrec i 0 (concatD [doc (showString "var")])

instance Print AbsGrammar.ConstKW where
  prt i e = case e of
    AbsGrammar.KeyWordConst -> prPrec i 0 (concatD [doc (showString "const")])

instance Print AbsGrammar.IfKW where
  prt i e = case e of
    AbsGrammar.KeyWordIf -> prPrec i 0 (concatD [doc (showString "if")])

instance Print AbsGrammar.ThenKW where
  prt i e = case e of
    AbsGrammar.KeyWordThen -> prPrec i 0 (concatD [doc (showString "then")])

instance Print AbsGrammar.ElseKW where
  prt i e = case e of
    AbsGrammar.KeyWordElse -> prPrec i 0 (concatD [doc (showString "else")])

instance Print AbsGrammar.IntKW where
  prt i e = case e of
    AbsGrammar.KeyWordTypeInt -> prPrec i 0 (concatD [doc (showString "integer")])

instance Print AbsGrammar.RealKW where
  prt i e = case e of
    AbsGrammar.KeyWordTypeReal -> prPrec i 0 (concatD [doc (showString "real")])

instance Print AbsGrammar.CharKW where
  prt i e = case e of
    AbsGrammar.KeyWordTypeChar -> prPrec i 0 (concatD [doc (showString "char")])

instance Print AbsGrammar.BoolKW where
  prt i e = case e of
    AbsGrammar.KeyWordTypeBoolean -> prPrec i 0 (concatD [doc (showString "boolean")])

instance Print AbsGrammar.StringKW where
  prt i e = case e of
    AbsGrammar.KeyWordTypeString -> prPrec i 0 (concatD [doc (showString "string")])

instance Print AbsGrammar.ArrayKW where
  prt i e = case e of
    AbsGrammar.KeyWordTypeArray -> prPrec i 0 (concatD [doc (showString "array")])

instance Print AbsGrammar.Program where
  prt i e = case e of
    AbsGrammar.ProgramStart programkw id innerblockwithdecl -> prPrec i 0 (concatD [prt 0 programkw, prt 0 id, doc (showString ";"), prt 0 innerblockwithdecl, doc (showString ".")])

instance Print AbsGrammar.InnerBlockWithDecl where
  prt i e = case e of
    AbsGrammar.InnerBlockWithDeclaration declarations innerblockexec -> prPrec i 0 (concatD [prt 0 declarations, prt 0 innerblockexec])

instance Print [AbsGrammar.Declaration] where
  prt = prtList

instance Print AbsGrammar.InnerBlockExec where
  prt i e = case e of
    AbsGrammar.InnerBlockOnlyExecution beginkw nonmandatoryterminator statements endkw -> prPrec i 0 (concatD [prt 0 beginkw, prt 0 nonmandatoryterminator, prt 0 statements, prt 0 endkw])

instance Print [AbsGrammar.Statement] where
  prt = prtList

instance Print AbsGrammar.NonMandatoryTerminator where
  prt i e = case e of
    AbsGrammar.NonMandatoryTerminator1 -> prPrec i 0 (concatD [])
    AbsGrammar.NonMandatoryTerminator2 -> prPrec i 0 (concatD [doc (showString ";")])

instance Print AbsGrammar.Declaration where
  prt i e = case e of
    AbsGrammar.DeclarationCostantsBlock costantsblock -> prPrec i 0 (concatD [prt 0 costantsblock])
    AbsGrammar.DeclarationVariablesBlock variablesblock -> prPrec i 0 (concatD [prt 0 variablesblock])
    AbsGrammar.DeclarationFunctionDecl functiondecl -> prPrec i 0 (concatD [prt 0 functiondecl])
    AbsGrammar.DeclarationProcedureDecl proceduredecl -> prPrec i 0 (concatD [prt 0 proceduredecl])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsGrammar.CostantsBlock where
  prt i e = case e of
    AbsGrammar.CostantsBlock1 constkw constantdecls -> prPrec i 0 (concatD [prt 0 constkw, prt 0 constantdecls])

instance Print [AbsGrammar.ConstantDecl] where
  prt = prtList

instance Print AbsGrammar.ConstantDecl where
  prt i e = case e of
    AbsGrammar.ConstantDeclaration id rightexp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 rightexp])
  prtList _ [x] = concatD [prt 0 x, doc (showString ";")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print AbsGrammar.VariablesBlock where
  prt i e = case e of
    AbsGrammar.VariablesBlock1 varkw variabledeclblocks -> prPrec i 0 (concatD [prt 0 varkw, prt 0 variabledeclblocks])

instance Print [AbsGrammar.VariableDeclBlock] where
  prt = prtList

instance Print [AbsGrammar.VariableDeclFunc] where
  prt = prtList

instance Print AbsGrammar.VariableDeclBlock where
  prt i e = case e of
    AbsGrammar.VariableDeclarationInsideBlock variablenames type_ -> prPrec i 0 (concatD [prt 0 variablenames, doc (showString ":"), prt 0 type_])
  prtList _ [x] = concatD [prt 0 x, doc (showString ";")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print AbsGrammar.DeclarationFunc where
  prt i e = case e of
    AbsGrammar.DeclarationFunc1 -> prPrec i 0 (concatD [])
    AbsGrammar.DeclarationFunc2 variabledeclfuncs -> prPrec i 0 (concatD [doc (showString "("), prt 0 variabledeclfuncs, doc (showString ")")])

instance Print AbsGrammar.VariableDeclFunc where
  prt i e = case e of
    AbsGrammar.VariableDeclarationInsideF variablenames type_ -> prPrec i 0 (concatD [prt 0 variablenames, doc (showString ":"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [AbsGrammar.VariableName] where
  prt = prtList

instance Print AbsGrammar.VariableName where
  prt i e = case e of
    AbsGrammar.VariableDeclarationNames id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsGrammar.FunctionDecl where
  prt i e = case e of
    AbsGrammar.FunctionDeclaration functionkw id declarationfunc type_ innerblockwithdecl -> prPrec i 0 (concatD [prt 0 functionkw, prt 0 id, prt 0 declarationfunc, doc (showString ":"), prt 0 type_, doc (showString ";"), prt 0 innerblockwithdecl, doc (showString ";")])

instance Print AbsGrammar.ProcedureDecl where
  prt i e = case e of
    AbsGrammar.ProcedureDeclaration procedurekw id declarationfunc innerblockwithdecl -> prPrec i 0 (concatD [prt 0 procedurekw, prt 0 id, prt 0 declarationfunc, doc (showString ";"), prt 0 innerblockwithdecl, doc (showString ";")])

instance Print AbsGrammar.FunctionCall where
  prt i e = case e of
    AbsGrammar.FunctionCall id rightexps -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rightexps, doc (showString ")")])

instance Print AbsGrammar.ProcedureCall where
  prt i e = case e of
    AbsGrammar.ProcedureCall id rightexps -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rightexps, doc (showString ")")])

instance Print [AbsGrammar.RightExp] where
  prt = prtList

instance Print AbsGrammar.Statement where
  prt i e = case e of
    AbsGrammar.StatementBlock innerblockexec -> prPrec i 0 (concatD [prt 0 innerblockexec])
    AbsGrammar.StatementIf if_ -> prPrec i 0 (concatD [prt 0 if_])
    AbsGrammar.StatementAssign assign -> prPrec i 0 (concatD [prt 0 assign])
    AbsGrammar.StatementFunctionCall functioncall -> prPrec i 0 (concatD [prt 0 functioncall])
    AbsGrammar.StatementProcedureCall procedurecall -> prPrec i 0 (concatD [prt 0 procedurecall])
    AbsGrammar.StatementWrite writeprimitive -> prPrec i 0 (concatD [prt 0 writeprimitive])
    AbsGrammar.StatementRead readprimitive -> prPrec i 0 (concatD [prt 0 readprimitive])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print AbsGrammar.Assign where
  prt i e = case e of
    AbsGrammar.VariableAssignment leftexp rightexp -> prPrec i 0 (concatD [prt 0 leftexp, doc (showString ":="), prt 0 rightexp])

instance Print AbsGrammar.RightExp where
  prt i e = case e of
    AbsGrammar.RightExpOr rightexp1 rightexp2 -> prPrec i 0 (concatD [prt 0 rightexp1, doc (showString "or"), prt 1 rightexp2])
    AbsGrammar.RightExpAnd rightexp1 rightexp2 -> prPrec i 1 (concatD [prt 1 rightexp1, doc (showString "and"), prt 2 rightexp2])
    AbsGrammar.RightExpGreater rightexp1 rightexp2 -> prPrec i 2 (concatD [prt 2 rightexp1, doc (showString ">"), prt 3 rightexp2])
    AbsGrammar.RightExpLess rightexp1 rightexp2 -> prPrec i 2 (concatD [prt 2 rightexp1, doc (showString "<"), prt 3 rightexp2])
    AbsGrammar.RightExpGreaterEqual rightexp1 rightexp2 -> prPrec i 2 (concatD [prt 2 rightexp1, doc (showString ">="), prt 3 rightexp2])
    AbsGrammar.RightExpLessEqual rightexp1 rightexp2 -> prPrec i 2 (concatD [prt 2 rightexp1, doc (showString "<="), prt 3 rightexp2])
    AbsGrammar.RightExpEqual rightexp1 rightexp2 -> prPrec i 2 (concatD [prt 2 rightexp1, doc (showString "="), prt 3 rightexp2])
    AbsGrammar.RightExpPlus rightexp1 rightexp2 -> prPrec i 3 (concatD [prt 3 rightexp1, doc (showString "+"), prt 4 rightexp2])
    AbsGrammar.RightExpMinus rightexp1 rightexp2 -> prPrec i 3 (concatD [prt 3 rightexp1, doc (showString "-"), prt 4 rightexp2])
    AbsGrammar.RightExpTimes rightexp1 rightexp2 -> prPrec i 4 (concatD [prt 4 rightexp1, doc (showString "*"), prt 5 rightexp2])
    AbsGrammar.RightExpDivide rightexp1 rightexp2 -> prPrec i 4 (concatD [prt 4 rightexp1, doc (showString "/"), prt 5 rightexp2])
    AbsGrammar.RightExpMod rightexp1 rightexp2 -> prPrec i 4 (concatD [prt 4 rightexp1, doc (showString "mod"), prt 5 rightexp2])
    AbsGrammar.RightExpDiv rightexp1 rightexp2 -> prPrec i 4 (concatD [prt 4 rightexp1, doc (showString "div"), prt 5 rightexp2])
    AbsGrammar.RightExpPower rightexp1 rightexp2 -> prPrec i 5 (concatD [prt 5 rightexp1, doc (showString "**"), prt 6 rightexp2])
    AbsGrammar.RightExpNot rightexp -> prPrec i 6 (concatD [doc (showString "not"), prt 7 rightexp])
    AbsGrammar.RightExpMinusUnary rightexp -> prPrec i 6 (concatD [doc (showString "-"), prt 7 rightexp])
    AbsGrammar.RightExpPlusUnary rightexp -> prPrec i 6 (concatD [doc (showString "+"), prt 7 rightexp])
    AbsGrammar.RightExpIdent id -> prPrec i 7 (concatD [prt 0 id])
    AbsGrammar.RightExpInteger n -> prPrec i 7 (concatD [prt 0 n])
    AbsGrammar.RightExpReal d -> prPrec i 7 (concatD [prt 0 d])
    AbsGrammar.RightExpBoolean boolean -> prPrec i 7 (concatD [prt 0 boolean])
    AbsGrammar.RightExpChar c -> prPrec i 7 (concatD [prt 0 c])
    AbsGrammar.RightExpString str -> prPrec i 7 (concatD [prt 0 str])
    AbsGrammar.RightExpFunctionCall functioncall -> prPrec i 7 (concatD [prt 0 functioncall])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsGrammar.LeftExp where
  prt i e = case e of
    AbsGrammar.LeftExp id -> prPrec i 0 (concatD [prt 0 id])

instance Print AbsGrammar.If where
  prt i e = case e of
    AbsGrammar.IfDefinition ifkw rightexp thenkw statement else_ -> prPrec i 0 (concatD [prt 0 ifkw, prt 0 rightexp, prt 0 thenkw, prt 0 statement, prt 0 else_])

instance Print AbsGrammar.Else where
  prt i e = case e of
    AbsGrammar.Else1 -> prPrec i 0 (concatD [])
    AbsGrammar.Else2 elsekw statement -> prPrec i 0 (concatD [prt 0 elsekw, prt 0 statement])

instance Print AbsGrammar.Type where
  prt i e = case e of
    AbsGrammar.TypeBaseType basetype -> prPrec i 0 (concatD [prt 0 basetype])
    AbsGrammar.TypeCompositeType compositetype -> prPrec i 0 (concatD [prt 0 compositetype])

instance Print AbsGrammar.BaseType where
  prt i e = case e of
    AbsGrammar.BaseTypeIntKW intkw -> prPrec i 0 (concatD [prt 0 intkw])
    AbsGrammar.BaseTypeRealKW realkw -> prPrec i 0 (concatD [prt 0 realkw])
    AbsGrammar.BaseTypeCharKW charkw -> prPrec i 0 (concatD [prt 0 charkw])
    AbsGrammar.BaseTypeBoolKW boolkw -> prPrec i 0 (concatD [prt 0 boolkw])
    AbsGrammar.BaseTypeStringKW stringkw -> prPrec i 0 (concatD [prt 0 stringkw])

instance Print AbsGrammar.Boolean where
  prt i e = case e of
    AbsGrammar.Boolean_true -> prPrec i 0 (concatD [doc (showString "true")])
    AbsGrammar.Boolean_false -> prPrec i 0 (concatD [doc (showString "false")])

instance Print AbsGrammar.CompositeType where
  prt i e = case e of
    AbsGrammar.CompTypeArray arraykw n basetype -> prPrec i 0 (concatD [prt 0 arraykw, doc (showString "["), prt 0 n, doc (showString "]"), doc (showString "of"), prt 0 basetype])
    AbsGrammar.CompTypePointer type_ -> prPrec i 0 (concatD [doc (showString "^"), prt 0 type_])

instance Print AbsGrammar.WritePrimitive where
  prt i e = case e of
    AbsGrammar.WriteInt rightexp -> prPrec i 0 (concatD [doc (showString "writeInt"), doc (showString "("), prt 0 rightexp, doc (showString ")")])
    AbsGrammar.WriteReal rightexp -> prPrec i 0 (concatD [doc (showString "writeReal"), doc (showString "("), prt 0 rightexp, doc (showString ")")])
    AbsGrammar.WriteChar rightexp -> prPrec i 0 (concatD [doc (showString "writeChar"), doc (showString "("), prt 0 rightexp, doc (showString ")")])
    AbsGrammar.WriteString rightexp -> prPrec i 0 (concatD [doc (showString "writeString"), doc (showString "("), prt 0 rightexp, doc (showString ")")])

instance Print AbsGrammar.ReadPrimitive where
  prt i e = case e of
    AbsGrammar.ReadInt leftexp -> prPrec i 0 (concatD [doc (showString "readInt"), doc (showString "("), prt 0 leftexp, doc (showString ")")])
    AbsGrammar.ReadReal leftexp -> prPrec i 0 (concatD [doc (showString "readReal"), doc (showString "("), prt 0 leftexp, doc (showString ")")])
    AbsGrammar.ReadChar leftexp -> prPrec i 0 (concatD [doc (showString "readChar"), doc (showString "("), prt 0 leftexp, doc (showString ")")])
    AbsGrammar.ReadString leftexp -> prPrec i 0 (concatD [doc (showString "readString"), doc (showString "("), prt 0 leftexp, doc (showString ")")])

