module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transBeginKW :: BeginKW -> Result
transBeginKW x = case x of
  KeyWordBegin -> failure x
transEndKW :: EndKW -> Result
transEndKW x = case x of
  KeyWordEnd -> failure x
transProgramKW :: ProgramKW -> Result
transProgramKW x = case x of
  KeyWordProgram -> failure x
transFunctionKW :: FunctionKW -> Result
transFunctionKW x = case x of
  KeyWordFunction -> failure x
transProcedureKW :: ProcedureKW -> Result
transProcedureKW x = case x of
  KeyWordProcedure -> failure x
transVarKW :: VarKW -> Result
transVarKW x = case x of
  KeyWordVar -> failure x
transConstKW :: ConstKW -> Result
transConstKW x = case x of
  KeyWordConst -> failure x
transIfKW :: IfKW -> Result
transIfKW x = case x of
  KeyWordIf -> failure x
transThenKW :: ThenKW -> Result
transThenKW x = case x of
  KeyWordThen -> failure x
transElseKW :: ElseKW -> Result
transElseKW x = case x of
  KeyWordElse -> failure x
transWhileKW :: WhileKW -> Result
transWhileKW x = case x of
  KeyWordWhile -> failure x
transForKW :: ForKW -> Result
transForKW x = case x of
  KeyWordFor -> failure x
transToKW :: ToKW -> Result
transToKW x = case x of
  KeyWordTo -> failure x
transDoKW :: DoKW -> Result
transDoKW x = case x of
  KeyWordDo -> failure x
transRepeatKW :: RepeatKW -> Result
transRepeatKW x = case x of
  KeyWordRepeat -> failure x
transUntilKW :: UntilKW -> Result
transUntilKW x = case x of
  KeyWordUntil -> failure x
transIntKW :: IntKW -> Result
transIntKW x = case x of
  KeyWordTypeInt -> failure x
transRealKW :: RealKW -> Result
transRealKW x = case x of
  KeyWordTypeReal -> failure x
transCharKW :: CharKW -> Result
transCharKW x = case x of
  KeyWordTypeChar -> failure x
transBoolKW :: BoolKW -> Result
transBoolKW x = case x of
  KeyWordTypeBoolean -> failure x
transStringKW :: StringKW -> Result
transStringKW x = case x of
  KeyWordTypeString -> failure x
transArrayKW :: ArrayKW -> Result
transArrayKW x = case x of
  KeyWordTypeArray -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  ProgramStart programkw ident innerblockwithdecl -> failure x
transInnerBlockWithDecl :: InnerBlockWithDecl -> Result
transInnerBlockWithDecl x = case x of
  InnerBlockWithDeclaration declarations innerblockexec -> failure x
transInnerBlockExec :: InnerBlockExec -> Result
transInnerBlockExec x = case x of
  InnerBlockOnlyExecution beginkw nonmandatoryterminator statements endkw -> failure x
transNonMandatoryTerminator :: NonMandatoryTerminator -> Result
transNonMandatoryTerminator x = case x of
  NonMandatoryTerminator1 -> failure x
  NonMandatoryTerminator2 -> failure x
transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  DeclarationCostantsBlock costantsblock -> failure x
  DeclarationVariablesBlock variablesblock -> failure x
  DeclarationFunctionDecl functiondecl -> failure x
  DeclarationProcedureDecl proceduredecl -> failure x
transCostantsBlock :: CostantsBlock -> Result
transCostantsBlock x = case x of
  CostantsBlock1 constkw constantdecls -> failure x
transConstantDecl :: ConstantDecl -> Result
transConstantDecl x = case x of
  ConstantDeclaration ident rightexp -> failure x
transVariablesBlock :: VariablesBlock -> Result
transVariablesBlock x = case x of
  VariablesBlock1 varkw variabledeclblocks -> failure x
transVariableDeclBlock :: VariableDeclBlock -> Result
transVariableDeclBlock x = case x of
  VariableDeclarationInsideBlock idents type_ initassign -> failure x
transInitAssign :: InitAssign -> Result
transInitAssign x = case x of
  InitAssign1 -> failure x
  InitAssign2 rightexp -> failure x
transDeclarationFunc :: DeclarationFunc -> Result
transDeclarationFunc x = case x of
  DeclarationFunc1 -> failure x
  DeclarationFunc2 variabledeclfuncs -> failure x
transVariableDeclFunc :: VariableDeclFunc -> Result
transVariableDeclFunc x = case x of
  VariableDeclarationInsideF idents type_ -> failure x
transFunctionDecl :: FunctionDecl -> Result
transFunctionDecl x = case x of
  FunctionDeclaration functionkw ident declarationfunc type_ innerblockwithdecl -> failure x
transProcedureDecl :: ProcedureDecl -> Result
transProcedureDecl x = case x of
  ProcedureDeclaration procedurekw ident declarationfunc innerblockwithdecl -> failure x
transFunctionCall :: FunctionCall -> Result
transFunctionCall x = case x of
  FunctionCall ident rightexps -> failure x
transProcedureCall :: ProcedureCall -> Result
transProcedureCall x = case x of
  ProcedureCall ident rightexps -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  StatementBlock innerblockexec -> failure x
  StatementIf ifkw rightexp thenkw statement elseblock -> failure x
  StatementFor forkw assign tokw rightexp dokw statement -> failure x
  StatementWhile whilekw rightexp dokw statement -> failure x
  StatementRepeatUntil repeatkw statements untilkw rightexp -> failure x
  StatementAssign assign -> failure x
  StatementFunctionCall functioncall -> failure x
  StatementProcedureCall procedurecall -> failure x
  StatementWrite writeprimitive -> failure x
  StatementRead readprimitive -> failure x
transElseBlock :: ElseBlock -> Result
transElseBlock x = case x of
  ElseBlock1 -> failure x
  ElseBlock2 elsekw statement -> failure x
transAssign :: Assign -> Result
transAssign x = case x of
  VariableAssignment leftexp rightexp -> failure x
transRightExp :: RightExp -> Result
transRightExp x = case x of
  RightExpOr rightexp1 rightexp2 -> failure x
  RightExpAnd rightexp1 rightexp2 -> failure x
  RightExpGreater rightexp1 rightexp2 -> failure x
  RightExpLess rightexp1 rightexp2 -> failure x
  RightExpGreaterEqual rightexp1 rightexp2 -> failure x
  RightExpLessEqual rightexp1 rightexp2 -> failure x
  RightExpEqual rightexp1 rightexp2 -> failure x
  RightExpPlus rightexp1 rightexp2 -> failure x
  RightExpMinus rightexp1 rightexp2 -> failure x
  RightExpTimes rightexp1 rightexp2 -> failure x
  RightExpDivide rightexp1 rightexp2 -> failure x
  RightExpMod rightexp1 rightexp2 -> failure x
  RightExpDiv rightexp1 rightexp2 -> failure x
  RightExpPower rightexp1 rightexp2 -> failure x
  RightExpNot rightexp -> failure x
  RightExpMinusUnary rightexp -> failure x
  RightExpPlusUnary rightexp -> failure x
  RightExpInteger integer -> failure x
  RightExpReal double -> failure x
  RightExpBoolean boolean -> failure x
  RightExpChar char -> failure x
  RightExpString string -> failure x
  RightExpFunctionCall functioncall -> failure x
  RightExpCopy leftexp -> failure x
transLeftExp :: LeftExp -> Result
transLeftExp x = case x of
  LeftExpIdent ident -> failure x
  LeftExpArrayAccess leftexp rightexps -> failure x
  LeftExpPointerValue leftexp -> failure x
  LeftExpPointerAddress leftexp -> failure x
transType :: Type -> Result
transType x = case x of
  TypeBaseType basetype -> failure x
  TypeCompositeType compositetype -> failure x
transBaseType :: BaseType -> Result
transBaseType x = case x of
  BaseTypeIntKW intkw -> failure x
  BaseTypeRealKW realkw -> failure x
  BaseTypeCharKW charkw -> failure x
  BaseTypeBoolKW boolkw -> failure x
  BaseTypeStringKW stringkw -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  Boolean_true -> failure x
  Boolean_false -> failure x
transCompositeType :: CompositeType -> Result
transCompositeType x = case x of
  CompTypeArray arraykw arraydeclarationdims basetype -> failure x
  CompTypePointer type_ -> failure x
transArrayDeclarationDim :: ArrayDeclarationDim -> Result
transArrayDeclarationDim x = case x of
  ArrayDeclarationDim rightexp1 rightexp2 -> failure x
transWritePrimitive :: WritePrimitive -> Result
transWritePrimitive x = case x of
  WriteInt rightexp -> failure x
  WriteReal rightexp -> failure x
  WriteChar rightexp -> failure x
  WriteString rightexp -> failure x
transReadPrimitive :: ReadPrimitive -> Result
transReadPrimitive x = case x of
  ReadInt leftexp -> failure x
  ReadReal leftexp -> failure x
  ReadChar leftexp -> failure x
  ReadString leftexp -> failure x

